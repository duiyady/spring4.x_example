Spring IoC容器(ApplicationContext)负责创建Bean，并通过容器将功能类Bean注入到你需要的Bean中。
Spring提供使用xml，注解，Java配置，groovy配置实现Bean的创建和注入。
声明bean的注解：
    @Component 组件，没有明确的角色。
    @Service 在业务逻辑层(service层)使用。
    @Repository 在数据访问层(dao层)使用。
    @Controller在展现层(MVC——>SpringMVC)使用。
    后三个都是被第一个注解的，其中都可以设置名字 例如，@Service("xxxx"),默认注入是按类型注入，写了名字后也可以按照名字注入；

注入bean的注解：
    @Autowired:Spring提供的注解。
    @Inject:JSR-330提供的注解。
    @Resource:JSR-250提供的注解。
    @Autowired，@Inject，@Resource可注解在set方法或者属性上
    @Autowired按照类型进行注入
    @Resource默认按照类型注入，也可按照名字注入@Resource(name="")  @Resource(type=xxx.class)

配置注解
    @Configuration声明当前类是一个配置类。
    使用@ComponentScan注解将会自动扫描包名下所有使用@Service,@Component,@Repository和@Controller的类，并注册为Bean。
    @ComponentScan可以加入扫描的路径，如果不加，默认就是当前路径及以下，其余的就扫不到

运行
    使用AnnotationConfigApplicationContext作为Spring容器，参数可以是配置类，也可以加入需要被管理但没有被扫描到的bean类


Java配置是Spring4.x推荐的配置方式，可以完全替代xml配置；Java配置也是Spring Boot推荐的配置方式。
Java配置是通过@Configuration和@Bean来实现的。
    @Configuration声明当前类是一个配置类，相当于一个Spring配置的xml文件。
    @Bean注解在方法上，声明当前方法的返回值为一个Bean。


AOP：面向切面编程，是相对于OOP面向对象编程而言的。
Spring的AOP的存在目的是为了解耦。AOP可以让一组类共享相同的行为。在OOP中只能通过继承类和实现接口来实现，但是这样的缺点是会使代码
的耦合度增加，且类继承只能为单继承，阻碍更多行为添加到一组类上，AOP的出现弥补了OOP的不足。
Spring支持AspectJ的注解式切面编程：
    (1) 使用@Aspect注解在类上声明该类是一个切面。
    (2) 使用@After,@Before,@Around定义建言(advice)，可直接将拦截规则(切点)作为参数。
    (3) 其中@After,@Before,@Around参数的拦截规则为切点(PointCut)，为了使切点复用，可使用@PointCut专门定义拦截规则，然后在
    @After,@Before,@Around的参数中调用。
    (4) 其中符合条件的每一个被拦截处为连接点(JoinPoint)。
    需要aspectjrt aspectjweaver


Scope描述的是Spring容器如何新建Bean的实例的。Spring的Scope有以下几种，通过@Scope注解来实现。
    (1) Singleton：一个Spring容器中只有一个Bean的实例，此为Spring的默认配置，全容器共享一个实例。
    (2) Prototype：每次调用新建一个Bean的实例。
    (3) Request：Web项目中，给每一个http request新建一个bean实例。
    (4) Session：Web项目中，给每一个http session新建一个bean实例。
    (5) GlobalSession：这个只在portal应用中有用，给每一个global http session新建一个bean实例。


Spring开发中经常涉及调用各种资源的情况，包含普通文件，网址，配置文件，系统环境变量等，我们可以使用Spring的表达式语言实现资源的
注入。
Spring主要在注解@Value的参数中使用表达式。需要commons-io


在我们进行实际开发的时候，经常遇到在Bean之前使用之前或者之后做些必要的操作，Spring对Bean的生命周期的操作提供了支持。在使用Java
配置和注解配置下提供如下两种方式：
    1. Java配置方式：使用@Bean的initMethod和destroyMethod(相当于xml配置的init-method和destory-method)。
    2. 注解方式：利用JSR-250的@PostConstruct和@PreDestroy


Profile为在不同环境下使用不同的配置提供了支持(开发环境下的配置和生产环境的配置肯定是不同的，例如数据库的配置)。
    1. 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。在开发中使用@Profile注解类或者方法，达到在不同情况下选择实例化不同的Bean。
    2. 通过设定jvm的spring.profiles.active参数来设置配置环境。
    3. Web项目设置在Servlet的context parameter中。


Spring的事件(Application Event)为Bean与Bean之间的消息通信提供了支持。当一个Bean处理完一个任务之后，希望另外一个Bean知道并
能做相应的处理，这时我们就需要让另外一个Bean监听当前Bean所发送的事件。
Spring的事件需要遵循如下流程：
    1. 自定义事件，继承ApplicationEvent
    2. 定义事件监听器，实现ApplicationListener



